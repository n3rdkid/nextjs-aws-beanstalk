name: Consumer Workflow
on:
  push:
    branches:
      - "develop"

jobs:
  setup_environment:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.get_env.outputs.env }}
    steps:
    - id: get_env
      run: |
        if grep -q "refs/tags/v" <<< ${{github.ref}}; then
          echo "::set-output name=env::PROD"
        else
          echo "::set-output name=env::DEV"
        fi
    - id: print_env
      name: Print environment
      run: echo  "Environment :- ${{ steps.get_env.outputs.env }}"

  build_and_deploy:
    name: Build and deploy the Consumer Package
    runs-on: ubuntu-latest
    needs: setup_environment
    outputs:
      is_consumer: ${{ steps.tag_test.outputs.is_consumer }}
    environment: ${{needs.setup_environment.outputs.env_name}}  
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          # Number of commits to fetch. 0 indicates all history for all branches and tags.
          fetch-depth: 0
      
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 14.17.3

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Check dependencies in cache 
        id: yarn-cache 
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Initializing dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run:  yarn bootstrap

      - name: Creating & Initializing env variables 
        run: |
          echo "ENV_VARIABLES" > .env
      - name : Check for package changes (if tag push)
        id: tag_test
        if : startsWith(github.ref, 'refs/tags/v')
        shell: bash

        run : | 
          number_of_tags=$(git tag | wc -l)
          if [ $number_of_tags -lt 2 ]; then
            echo "::set-output name=is_consumer::true"
            echo "Creating production build for first time"
            exit 0
          fi
          old_tag=$(git describe --abbrev=0 --tags $(git rev-list --tags --skip=1  --max-count=1)) 
          echo $old_tag
          new_tag=$(git describe --abbrev=0 --tags $(git rev-list --tags --max-count=1))
          echo $new_tag
          
          diff_files=$(sudo git diff $old_tag $new_tag --name-only | grep -c packages/consumer || true)    
          echo $diff_files
          if [[ ${diff_files} -ne 0 ]]; then
            echo "::set-output name=is_consumer::true"
          fi
      - name: Build the consumer package
        if: ${{ startsWith(github.ref, 'refs/heads/') || (startsWith(github.ref, 'refs/tags/v') && steps.tag_test.outputs.is_consumer == 'true') }}
        run: |
         echo "Build Consumer"
         echo ${{github.event_name}} ${{github.ref}}
      
      - name: Generate deployment package for consumer
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || (startsWith(github.ref, 'refs/tags/v') && steps.tag_test.outputs.is_consumer == 'true')) }}
        run: zip -r deploy.zip . -x '*.git*'
      
      - name: Get timestamp
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || (startsWith(github.ref, 'refs/tags/v') && steps.tag_test.outputs.is_consumer == 'true')) }}
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run string replace
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || (startsWith(github.ref, 'refs/tags/v') && steps.tag_test.outputs.is_consumer == 'true')) }}
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'

      - name: Deploy to EB
        if: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/develop' || (startsWith(github.ref, 'refs/tags/v') && steps.tag_test.outputs.is_consumer == 'true')) }}
        uses: einaregilsson/beanstalk-deploy@v16
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
          application_name: ${{ secrets.APPLICATION_NAME }}
          environment_name: ${{ secrets.BEANSTALK_ENVIRONMENT_NAME }}
          version_label: "test-one-${{ steps.format-time.outputs.replaced }}"
          region: ${{ secrets.REGION }}
          deployment_package: deploy.zip
